{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2015/spring-aop/","result":{"data":{"site":{"siteMetadata":{"title":"一席之地","author":"xi ming"}},"markdownRemark":{"id":"cd3f8952-46e4-5e4e-9331-7e1d7acf9163","excerpt":"在云盘服务端 java 化的进程中，我们选择使用了在 header 中添加认证头信息的方式进行权限校验，这样就触发了一个问题，spring mvc 中如何完成这个认证过程。里面有一个难点就是如果请求 body 有业务内容，我们需要获取到里面的内容进行签名，最开始我们直接实现了一个 Interceptor…","html":"<p>在云盘服务端 java 化的进程中，我们选择使用了在 header 中添加认证头信息的方式进行权限校验，这样就触发了一个问题，spring mvc 中如何完成这个认证过程。里面有一个难点就是如果请求 body 有业务内容，我们需要获取到里面的内容进行签名，最开始我们直接实现了一个 Interceptor 类，然后通过 preHandle  方法中的 HttpServletRequest 获取到了 body，然后进行签名计算，但是这样有问题，在 spring mvc 将 body 内容注入到 handler 参数之前我们人为的消费了里面的数据，导致如下 function 中 addGroup 参数为空，所以这个方法肯定不行。</p>\n<p><img src=\"http://images.yeanzhi.cn/1442978004449.png\" alt=\"\"></p>\n<h3 id=\"解决办法\" style=\"position:relative;\">解决办法：<a href=\"#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\" aria-label=\"解决办法 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<p>接下来经过研究 spring 注入流程，发现这个办法，直接实现 spring 中的 MethodInterceptor 这个接口如下：</p>\n<p><img src=\"http://images.yeanzhi.cn/1442979422817.png\" alt=\"\"></p>\n<p>然后在 handler 函数上加入我们自定义好的注解类即可：</p>\n<p><img src=\"http://images.yeanzhi.cn/1442979489935.png\" alt=\"\"></p>\n<p>这里面的原理是，这个会 MethodInterceptor 在函数被注入后执行之前进行触发，这样我们只需要做好一些约定，就可以使用这个注解完成我们的权限验证的问题，从而避免 body 被提前消费。</p>\n<p>最后别忘在配置文件中进行实现如下配置，让 spring 容器加载这个拦截器</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-xml line-numbers\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accessRequiredInterceptor<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.xxx.xm.mbox.interceptors.AccessRequiredInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>从上面这个事情上不难看出，spring mvc 基于 spring 构建的，整个请求生命周期过滤可以在 mvc 中进行，也可以借助 spring 本身的 aop 进行拦截。后者明显更底层一些</p>","fields":{"slug":"/post/2015/spring-aop/"},"tableOfContents":"<ul>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\">解决办法：</a></li>\n</ul>","frontmatter":{"title":"spring aop 权限拦截","date":"September 23, 2015","description":null},"wordCount":{"words":80,"paragraphs":7,"sentences":7}}},"pageContext":{"slug":"/post/2015/spring-aop/","previous":{"fields":{"slug":"/post/2015/dozer/"},"frontmatter":{"title":"dozer使用","tags":["dozer","java"],"description":null}},"next":{"fields":{"slug":"/post/2015/云盘服务端从nodejs 专项 java 相关复盘/"},"frontmatter":{"title":"云盘服务端从nodejs 专项 java 相关复盘","tags":["云盘","nodejs","java"],"description":null}}}},"staticQueryHashes":["1006016363","324394502","63159454"],"slicesMap":{}}