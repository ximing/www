{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2016/oa/","result":{"data":{"site":{"siteMetadata":{"title":"一席之地","author":"xi ming"}},"markdownRemark":{"id":"431cf44d-449c-5a90-bc3a-432d51935f9a","excerpt":"任何信息化系统，从技术角度看过去，都是流程，表单和角色。 从业务的角度看过去，会有所不同，比如 ERP 关注的物质资产，HR 系统关注的是人力资产，CRM 关注的是外部客户资源等等。 轻 OA 来讲的话，关注的应该是事务性的工作，比如周报，日程，TODO 等等。 现在如果围绕及时通讯去做 OA…","html":"<p>任何信息化系统，<strong>从技术角度看过去，都是流程，表单和角色</strong>。</p>\n<p>从业务的角度看过去，会有所不同，比如 ERP 关注的物质资产，HR 系统关注的是人力资产，CRM 关注的是外部客户资源等等。</p>\n<p>轻 OA 来讲的话，关注的应该是事务性的工作，比如周报，日程，TODO 等等。</p>\n<p>现在如果围绕及时通讯去做 OA 的话，合理的技术拆解方案应该是这样的：从后台的角度业务其实就是各种中间件的一种组合（这里指的并不是 nodejs/python 的那种中间件，而是类似于微服务相互关联的一整套架构），大部分轻 OA 应用实际编码部分将会是流程上面的一种流转控制，其余的抽象为中间件去做。更进一步，流转方式一旦抽象出来，甚至可以实现一种用户自定义表单的形式来反转系统的开发复杂度，<strong>也就是系统控制流程和角色两个变量，让用户去自定义实际业务中变化最大的表单部分。</strong> 如图一，这样更符合当前内信的目标群体和策略</p>\n<p><img src=\"https://xming-images.oss-cn-beijing.aliyuncs.com/md/1582807443800-70012d6cd17e6a1efe875cf3a1369964.png\" alt=\"\"></p>\n<p>在整个架构中，如果我们抓住不变的，那么应对变化就会有所余力和预期，在目前的一些业务诉求下，很容易能想到的一些通用型的中间件可以有「通知」「报表数据导入与处理」「组织结构信息获取」「任务调度」「分词搜索」「存储服务」「」。。。等等越往后越偏向于通用与底层。而在端上面来看，更多的是对表单组件的封装，以及通用 SDK 的抽象上。</p>","fields":{"slug":"/post/2016/oa/"},"tableOfContents":"","frontmatter":{"title":"轻OA 的一些思考","date":"July 11, 2016","description":null},"wordCount":{"words":59,"paragraphs":5,"sentences":5}}},"pageContext":{"slug":"/post/2016/oa/","previous":{"fields":{"slug":"/post/2016/05-11-解决复杂问题/"},"frontmatter":{"title":"解决复杂问题的方法论","tags":["方法论","决策","复杂性管理"],"description":null}},"next":{"fields":{"slug":"/post/2016/IM 消息文件实现/"},"frontmatter":{"title":"IM 消息文件实现","tags":["nginx","im","云盘"],"description":null}}}},"staticQueryHashes":["1006016363","324394502","63159454"],"slicesMap":{}}