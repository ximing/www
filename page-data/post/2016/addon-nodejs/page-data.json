{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2016/addon-nodejs/","result":{"data":{"site":{"siteMetadata":{"title":"一席之地","author":"xi ming"}},"markdownRemark":{"id":"88e0ac7b-9bb0-5191-a665-22d7cc53efbd","excerpt":"最近在基于 electron 做客户端相关工作，需要写 nodejs 的 addon 以便拓展 electron 相关功能，涉及到一些高级东西，写下相关经验。 一：asynchronous addons 在开发过程中，我们一定会遇到需要在 c++中处理一些耗时的任务，这个时候，必须使用异步 addon…","html":"<p>最近在基于 electron 做客户端相关工作，需要写 nodejs 的 addon 以便拓展 electron 相关功能，涉及到一些高级东西，写下相关经验。</p>\n<h3 id=\"一asynchronous-addons\" style=\"position:relative;\">一：asynchronous addons<a href=\"#%E4%B8%80asynchronous-addons\" aria-label=\"一asynchronous addons permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<p>在开发过程中，我们一定会遇到需要在 c++中处理一些耗时的任务，这个时候，必须使用异步 addon，如果使用同步的就像下面的传统 addon 写法，就会导致 JavaScript 线程被 blocked。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token comment\">// 引入 C++ addon</span>\nvar addon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./cpp/build/Release/addon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// 调用 addon, 这里就会被blocked住，直到c++返回结果</span>\nvar outputdata <span class=\"token operator\">=</span> addon<span class=\"token punctuation\">.</span><span class=\"token function\">get_some_result</span><span class=\"token punctuation\">(</span>some input data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//do some thing</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>这种情况应该使用的是传统的 JavaScript 回调的机制：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">addon<span class=\"token punctuation\">.</span><span class=\"token function\">get_some_result_async</span><span class=\"token punctuation\">(</span>some input data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">outputdata</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//do some thing</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>这时候就必须了解相关的的线程机制，在我们当前的 case 中会有两个线程，一个是 event loop【javascript 在其中执行的线程】，也是我们不想阻塞的线程。另一个线程是被 libuv 管理的线程 我们叫他 worker 线程，很显然你不能在 event loop 线程和 worker 线程共享各自的栈数据，所以我们需要某种方案在两个线程里面共享数据，以便 worker 线程能拿到 event loop 线程的输入，event loop 线程能拿到 worker 线程的输出。</p>\n<p>整个调用流程如下图：</p>\n<p>首先定义一个共享数据结构体，放在内存堆上。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Work</span> <span class=\"token punctuation\">{</span>\n  uv_work_t  request<span class=\"token punctuation\">;</span> <span class=\"token comment\">//指向了work本身，libuv api 在启动worker 线程的时候接受一个uv_work_t类型的指针</span>\n<span class=\"token comment\">/*\n*Persistent代表存储在堆上，防止被回收，可以完成类似闭包的功能。\n在这里要了解几个V8里面的概念\n在v8当中所有JavaScript数据都是由GC管理的，内存分配都是在V8的堆中进行分配的，JavaScript的值和对象也都存放在V8的堆中。\n这个堆由V8独立的去维护，失去引用的对象将会被V8的GC掉并可以重新分配给其他对象。而所有数据型（Value的派生类）变量的地址（Value*）本身就是一个Handle，即是对堆中对象的引用。\n所以V8内存管理其实就是对Handle进行管理，这样通过Handle GC就能知道Heap中一个对象的引用情况，当一个对象的Handle引用为发生改变的时候，GC即可对该对象进行回收（gc）或者移动。而直接通过C++的方式去直接去引用一个对象，会使得该对象无法被V8管理。\n另外Handle分为Local和Persistent两种：\nLocal是局部的，同时被HandleScope进行管理。\npersistent，是全局的，不受HandleScope的管理，其作用域可以延伸到不同的函数可以用来实现一些Closure之类的效果。Persistent Handle对象需要Persistent::New, Persistent::Dispose配对使用，类似于C++中new和delete。\n\n通常在一个函数中会有很多Handle，而HandleScope则相当于用来装Handle（Local）的容器，当HandleScope生命周期结束的时候，其内部包含的所有Handle也将会被释放，这将会引起堆中对象引用的更新。\nHandleScope是分配在栈上，不能通过New的方式进行创建。对于同一个作用域内可以有多个HandleScope，新的HandleScope将会覆盖上一个HandleScope，并对Local Handle进行管理。\n*/</span>\n  v8<span class=\"token double-colon punctuation\">::</span>Persistent<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span> callback<span class=\"token punctuation\">;</span> <span class=\"token comment\">//callback存储javascript回调函数</span>\n  std<span class=\"token double-colon punctuation\">::</span>string input<span class=\"token comment\">//例子中javascript传入的输入</span>\n  std<span class=\"token double-colon punctuation\">::</span>string output<span class=\"token punctuation\">;</span><span class=\"token comment\">//异步worker线程返回的输出</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>addon 的 get_some_result_async 方法，通过 libuv 启动 worker 线程</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">get_some_result_async</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> v8<span class=\"token double-colon punctuation\">::</span>FunctionCallbackInfo<span class=\"token operator\">&lt;</span>v8<span class=\"token double-colon punctuation\">::</span>Value<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Isolate<span class=\"token operator\">*</span> isolate <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">GetIsolate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Work <span class=\"token operator\">*</span> work <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    work<span class=\"token operator\">-></span>request<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> work<span class=\"token punctuation\">;</span>\n    v8<span class=\"token double-colon punctuation\">::</span>String<span class=\"token double-colon punctuation\">::</span>Utf8Value <span class=\"token function\">param1</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-></span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string inputString <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>param1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    work<span class=\"token operator\">-></span>input <span class=\"token operator\">=</span> inputString<span class=\"token punctuation\">;</span>\n     Local<span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span> callback <span class=\"token operator\">=</span> <span class=\"token class-name\">Local</span><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Cast</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    work<span class=\"token operator\">-></span>callback<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span>isolate<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 启动 worker 线程异步去做一些事情，本线程中立即返回</span>\n    <span class=\"token function\">uv_queue_work</span><span class=\"token punctuation\">(</span><span class=\"token function\">uv_default_loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>work<span class=\"token operator\">-></span>request<span class=\"token punctuation\">,</span>\n        workAsync<span class=\"token punctuation\">,</span>workAsyncComplete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//直接返回给js了</span>\n    args<span class=\"token punctuation\">.</span><span class=\"token function\">GetReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token function\">Undefined</span><span class=\"token punctuation\">(</span>isolate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>worker 线程</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">workAsync</span><span class=\"token punctuation\">(</span>uv_work_t <span class=\"token operator\">*</span>req<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Work <span class=\"token operator\">*</span>work <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Work <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">:</span>string input <span class=\"token operator\">=</span> work<span class=\"token operator\">-></span>input<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//假装很耗时的样子</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>worder 线程 complete 后回调，注意这个函数 执行在 v8 线程中</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">WorkAsyncComplete</span><span class=\"token punctuation\">(</span>uv_work_t <span class=\"token operator\">*</span>req<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> status<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Isolate <span class=\"token operator\">*</span> isolate <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolate</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GetCurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v8<span class=\"token double-colon punctuation\">::</span>HandleScope <span class=\"token function\">handleScope</span><span class=\"token punctuation\">(</span>isolate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Required for Node 4.x</span>\n\n    Work <span class=\"token operator\">*</span>work <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Work <span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 设置回调函数参数</span>\n    Handle<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">></span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> v8<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">String</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">NewFromUtf8</span><span class=\"token punctuation\">(</span>isolate<span class=\"token punctuation\">,</span> work<span class=\"token operator\">-></span>output<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 执行callback</span>\n    <span class=\"token class-name\">Local</span><span class=\"token operator\">&lt;</span>Function<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>isolate<span class=\"token punctuation\">,</span> work<span class=\"token operator\">-></span>callback<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>\n      <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>isolate<span class=\"token operator\">-></span><span class=\"token function\">GetCurrentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">Global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// 释放 persistent回调函数</span>\n    work<span class=\"token operator\">-></span>callback<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span> work<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","fields":{"slug":"/post/2016/addon-nodejs/"},"tableOfContents":"<ul>\n<li><a href=\"#%E4%B8%80asynchronous-addons\">一：asynchronous addons</a></li>\n</ul>","frontmatter":{"title":"nodejs addon 结合 libuv 使用经验","date":"April 20, 2016","description":null},"wordCount":{"words":88,"paragraphs":10,"sentences":10}}},"pageContext":{"slug":"/post/2016/addon-nodejs/","previous":{"fields":{"slug":"/post/2016/如何召开一场有效的会议/"},"frontmatter":{"title":"如何召开一场有效的会议","tags":["方法论","团队管理"],"description":null}},"next":{"fields":{"slug":"/post/2016/01-01-动态规划/"},"frontmatter":{"title":"动态规划","tags":["算法"],"description":null}}}},"staticQueryHashes":["1006016363","324394502","63159454"],"slicesMap":{}}