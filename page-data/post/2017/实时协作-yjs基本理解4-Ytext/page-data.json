{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2017/实时协作-yjs基本理解4-Ytext/","result":{"data":{"site":{"siteMetadata":{"title":"一席之地","author":"xi ming"}},"markdownRemark":{"id":"1b05c4c6-2995-5c74-b3f1-07ee35d8771e","excerpt":"Yjs 中的 Y.Text 是一种特殊的 CRDT (Conflict-free replicated data types)，它是用于处理分布式环境中的实时合作文本编辑的数据结构。Y.Text 允许多个用户同时在文本的任何位置进行插入和删除操作，无需担心冲突或数据不一致。\nY.Text…","html":"<p>Yjs 中的 Y.Text 是一种特殊的 CRDT (Conflict-free replicated data types)，它是用于处理分布式环境中的实时合作文本编辑的数据结构。Y.Text 允许多个用户同时在文本的任何位置进行插入和删除操作，无需担心冲突或数据不一致。\nY.Text 的工作原理基于两个主要的概念：</p>\n<ol>\n<li><strong>操作的唯一标识符：</strong> 在 Yjs 中，每个插入或删除操作都由一个全局唯一的标识符标识。此标识符是由生成操作的用户的唯一标识符和一个递增的逻辑时钟值组成的。这保证了即使两个用户在相同的位置进行操作，他们的操作也可以被区分开。</li>\n<li><strong>操作的部分排序：</strong> Yjs 使用这些唯一标识符为所有的操作定义了一个部分排序。具体来说，如果操作 A 的标识符小于操作 B 的标识符，那么我们就说操作 A 在操作 B 之前。当两个操作在同一位置发生时，这种排序可以用来解决冲突：我们总是选择标识符较小的操作先执行。</li>\n</ol>\n<p>从操作和合并的角度看：\n<strong>1. 插入操作</strong>\n每一个字符都被赋予一个全局唯一的标识符（ID）。这个 ID 由两部分组成：生成该操作的客户端的唯一 ID 和一个在该客户端中的递增的逻辑时钟。因此，即使在网络延迟的情况下，不同客户端的操作也能被准确地区分开。\n<strong>2. 删除操作</strong>\n删除操作在 Yjs 中实现的方式是，每个字符的删除信息被记录下来，并与插入操作一同被传播到所有的副本。当一个副本收到一个删除操作时，它会从文档中删除对应的字符。\n<strong>3. 更新操作</strong>、\n在 Y.Text 中，并没有明确的“更新”操作。它通过组合删除和插入操作来达到“更新”的效果。例如，如果想在某个位置替换一个字符，你可以在那个位置先删除那个字符，然后再插入新的字符。\n<strong>4. 冲突解决</strong>\n当两个或更多的操作在同一位置发生时，Yjs 通过比较他们的 ID 来决定他们的顺序。因为 ID 是全局唯一的，并且有一个定义好的顺序，所以所有的副本都会得到相同的结果，无论他们收到操作的顺序如何。\n<strong>5. 并发操作</strong>\n当两个并发的操作到达时，Yjs 会根据前面提到的规则决定他们的顺序。这样，只要所有的副本都收到了所有的操作，他们最终就会达到相同的状态。</p>\n<p>另外在Yjs中，通过维护一个操作日志来保存所有的插入和删除操作。操作日志是Yjs的核心数据结构，通过它可以在任何时候重建当前的文档状态。\n以下是一个自己实现的粗略的代码示例，用于说明这些概念：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">YText</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ops <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 操作日志</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文本的当前状态</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientId <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 随机生成客户端ID</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 逻辑时钟</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">clientId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">clock</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'insert'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> char <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> char <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> index <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 处理来自其他客户端的操作</span>\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">operation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'insert'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> operation<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">char</span><span class=\"token operator\">:</span> operation<span class=\"token punctuation\">.</span>char <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token function\">compareIds</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 对文本进行重新排序</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">compareIds</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ID比较函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">compareIds</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id1<span class=\"token punctuation\">,</span> id2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">.</span>clientId <span class=\"token operator\">&lt;</span> id2<span class=\"token punctuation\">.</span>clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">.</span>clientId <span class=\"token operator\">></span> id2<span class=\"token punctuation\">.</span>clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> id1<span class=\"token punctuation\">.</span>clock <span class=\"token operator\">-</span> id2<span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在这个例子中，我假设操作是按顺序接收的，即没有网络延迟或乱序操作的问题。在实际的 Yjs 中，处理这些问题需要更多的逻辑和数据结构，包括状态向量、删除集、并进行操作转换等。</p>\n<p>请注意，这个示例代码是一个非常简化的版本，Yjs 的实际实现会更复杂，因为它需要处理各种网络问题，例如乱序的操作和网络分区，还需要进一步分析源码。</p>","fields":{"slug":"/post/2017/实时协作-yjs基本理解4-Ytext/"},"tableOfContents":"","frontmatter":{"title":"实时协作-yjs基本理解4-Ytext","date":"April 12, 2017","description":null},"wordCount":{"words":122,"paragraphs":7,"sentences":7}}},"pageContext":{"slug":"/post/2017/实时协作-yjs基本理解4-Ytext/","previous":{"fields":{"slug":"/post/2017/实时协作-yjs基本理解3-操作日志/"},"frontmatter":{"title":"实时协作-yjs基本理解3-操作日志","tags":null,"description":null}},"next":{"fields":{"slug":"/post/2017/实时协作-yjs和ShareDB对比/"},"frontmatter":{"title":"实时协作-yjs和ShareDB对比","tags":null,"description":null}}}},"staticQueryHashes":["1006016363","324394502","63159454"],"slicesMap":{}}