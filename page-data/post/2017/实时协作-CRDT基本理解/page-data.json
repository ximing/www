{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2017/实时协作-CRDT基本理解/","result":{"data":{"site":{"siteMetadata":{"title":"一席之地","author":"xi ming"}},"markdownRemark":{"id":"608ec6ed-0997-5ca4-b8a4-6390e4ed44fc","excerpt":"CRDT（Conflict-free Replicated Data Types）通过合并策略和操作转换来保证两个端之间的实时协作最终一致性。下面使用一个简单的文本编辑器的例子来建立一下体感： 假设我们有两个端 A 和端 B，它们同时编辑同一个文本。现在我们进行如下操作： 端 A 在光标位置插入字符 ‘X…","html":"<p>CRDT（Conflict-free Replicated Data Types）通过合并策略和操作转换来保证两个端之间的实时协作最终一致性。下面使用一个简单的文本编辑器的例子来建立一下体感：</p>\n<p>假设我们有两个端 A 和端 B，它们同时编辑同一个文本。现在我们进行如下操作：</p>\n<ol>\n<li>端 A 在光标位置插入字符 ‘X’，生成一个插入操作。</li>\n<li>同时，端 B 在<strong>同样的光标位置</strong>插入字符 ‘Y’，生成一个插入操作。</li>\n</ol>\n<p>现在，端 A 和端 B 都有了不同的操作。为了保证最终一致性，我们需要一个合并策略和操作转换。\n在这个例子中，我们使用<strong>标识符</strong>和<strong>位置信息</strong>来处理并发操作。每个字符都有一个唯一的标识符和位置信息。以下是使用 JavaScript 实现 CRDT 文本编辑器的简单代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义一个 CRDT 文本编辑器类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CRDTTextEditor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 类的构造函数，初始化一个空字符串</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储文本的变量</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 插入字符的方法，参数包括插入的字符信息，来源站点 ID，操作计数器以及插入的位置</span>\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char<span class=\"token punctuation\">,</span> siteId<span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">,</span> position</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 在指定的位置插入字符，并更新存储的文本</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> char <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 合并两个 CRDT 文本编辑器的方法，参数是另一个 CRDT 文本编辑器</span>\n  <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">otherEditor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 合并两个文本编辑器的文本</span>\n    <span class=\"token keyword\">const</span> mergedText <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">mergeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> otherEditor<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 更新两个文本编辑器的文本为合并后的文本</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> mergedText<span class=\"token punctuation\">;</span>\n    otherEditor<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> mergedText<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 获取存储的文本内容的方法</span>\n  <span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 合并两个文本的方法，参数是两个要合并的文本</span>\n  <span class=\"token function\">mergeText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text1<span class=\"token punctuation\">,</span> text2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 初始化一个空字符串，用于存储合并后的文本</span>\n    <span class=\"token keyword\">let</span> mergedText <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 初始化两个指针，分别用于遍历两个文本</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 当两个文本都还没有遍历完时，执行循环</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> text1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> j <span class=\"token operator\">&lt;</span> text2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 获取当前遍历到的两个字符</span>\n      <span class=\"token keyword\">const</span> char1 <span class=\"token operator\">=</span> text1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> char2 <span class=\"token operator\">=</span> text2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 如果文本1还有字符而文本2没有，将文本1的字符加入到合并后的文本中，然后将文本1的指针后移</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>char2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mergedText <span class=\"token operator\">+=</span> char1<span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>char1 <span class=\"token operator\">&amp;&amp;</span> char2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果文本2还有字符而文本1没有，将文本2的字符加入到合并后的文本中，然后将文本2的指针后移</span>\n        mergedText <span class=\"token operator\">+=</span> char2<span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果两个文本都还有字符，比较两个字符的来源站点 ID 和操作计数器</span>\n        <span class=\"token keyword\">const</span> siteId1 <span class=\"token operator\">=</span> char1<span class=\"token punctuation\">.</span>siteId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> siteId2 <span class=\"token operator\">=</span> char2<span class=\"token punctuation\">.</span>siteId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> counter1 <span class=\"token operator\">=</span> char1<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> counter2 <span class=\"token operator\">=</span> char2<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 如果字符1的来源站点 ID 小于字符2的，或者来源站点 ID 相同但操作计数器小于字符2的，将字符1加入到合并后的文本中，然后将文本1的指针后移</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siteId1 <span class=\"token operator\">&lt;</span> siteId2 <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>siteId1 <span class=\"token operator\">===</span> siteId2 <span class=\"token operator\">&amp;&amp;</span> counter1 <span class=\"token operator\">&lt;</span> counter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          mergedText <span class=\"token operator\">+=</span> char1<span class=\"token punctuation\">;</span>\n          i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token comment\">// 否则，将字符2加入到合并后的文本中，然后将文本2的指针后移</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          mergedText <span class=\"token operator\">+=</span> char2<span class=\"token punctuation\">;</span>\n          j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 返回合并后的文本</span>\n    <span class=\"token keyword\">return</span> mergedText<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 创建两个 CRDT 文本编辑器的实例</span>\n<span class=\"token keyword\">const</span> editorA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CRDTTextEditor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> editorB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CRDTTextEditor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 端 A 在光标位置插入字符 'X'</span>\neditorA<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">char</span><span class=\"token operator\">:</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">siteId</span><span class=\"token operator\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 端 B 在同样的光标位置插入字符 'Y'</span>\neditorB<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">char</span><span class=\"token operator\">:</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">siteId</span><span class=\"token operator\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">counter</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 合并两个文本编辑器</span>\neditorA<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>editorB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\neditorB<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>editorA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取端 A 的文本内容并打印</span>\n<span class=\"token keyword\">const</span> textA <span class=\"token operator\">=</span> editorA<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>textA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: \"XY\"</span>\n\n<span class=\"token comment\">// 获取端 B 的文本内容并打印</span>\n<span class=\"token keyword\">const</span> textB <span class=\"token operator\">=</span> editorB<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>textB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: \"XY\"</span>\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>在这个例子中，通过使用标识符和位置信息，CRDT 文本编辑器能够合并端 A 和端 B 的插入操作，并保持最终一致的状态。最终，两个端都得到了包含字符 ‘X’ 和 ‘Y’ 的文本内容。</p>\n<p>这个例子简化了一些 CRDT 的重要概念，比如它没有处理删除操作，也没有处理并发操作的所有可能情况。实际的 CRDT 实现可能更加复杂，并根据具体的数据结构和合并策略来处理并发操作。CRDT 的关键是设计合适的合并策略和操作转换规则，以确保最终各个端之间的实时协作达到一致的状态。</p>","fields":{"slug":"/post/2017/实时协作-CRDT基本理解/"},"tableOfContents":"","frontmatter":{"title":"实时协作-CRDT基本理解","date":"April 10, 2017","description":null},"wordCount":{"words":67,"paragraphs":7,"sentences":7}}},"pageContext":{"slug":"/post/2017/实时协作-CRDT基本理解/","previous":{"fields":{"slug":"/post/2017/百度脑图支持实时协作/"},"frontmatter":{"title":"百度脑图支持实时协作","tags":["文档","实时协作"],"description":null}},"next":{"fields":{"slug":"/post/2017/实时协作-CRDT基本理解(2)/"},"frontmatter":{"title":"实时协作-CRDT基本理解(2)","tags":null,"description":null}}}},"staticQueryHashes":["1006016363","324394502","63159454"],"slicesMap":{}}