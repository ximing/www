{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2017/实时协作算法相关概念/","result":{"data":{"site":{"siteMetadata":{"title":"一席之地","author":"xi ming"}},"markdownRemark":{"id":"384641d1-eedd-5bac-9903-5aea6a871089","excerpt":"偏序、因果关系、并发关系 操作间的偏序最早源于 Lamport 事件偏序关系，即 happened before 和 concurrent 的逻辑时钟（Logical Clocks）。基于 Lamport 的偏序事件关系，协同编辑系统中的因果关系和并发关系，可以理解为定义1 和定义2。 基本定义 定义…","html":"<h2 id=\"偏序因果关系并发关系\" style=\"position:relative;\">偏序、因果关系、并发关系<a href=\"#%E5%81%8F%E5%BA%8F%E5%9B%A0%E6%9E%9C%E5%85%B3%E7%B3%BB%E5%B9%B6%E5%8F%91%E5%85%B3%E7%B3%BB\" aria-label=\"偏序因果关系并发关系 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h2>\n<p>操作间的偏序最早源于 Lamport 事件偏序关系，即 happened before 和 concurrent 的逻辑时钟（Logical Clocks）。基于 Lamport 的偏序事件关系，协同编辑系统中的因果关系和并发关系，可以理解为定义1 和定义2。</p>\n<h3 id=\"基本定义\" style=\"position:relative;\">基本定义<a href=\"#%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89\" aria-label=\"基本定义 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<p><strong>定义 1. 因果关系</strong></p>\n<p>给定任意两个分别位于站点 i 和站点 j 的操作 Oa 和 Ob，称 Oa 和 Ob 存在因果关系（记做 Oa→Ob），当且仅当 Oa 和 Ob 满足下列三个条件之一：</p>\n<ol>\n<li>i=j，Oa 发生在 Ob 之前</li>\n<li>i≠j，Oa 在站点 j 的执行先于 Ob 的产生</li>\n<li>存在操作 Oc，有 Oa→Oc 并且 Oc→Ob</li>\n</ol>\n<p><strong>定义 2. 并发关系</strong></p>\n<p>给定任意两个操作 Oa 和 Ob，称 Oa 和 Ob 存在并发关系（记做 Oa || Ob），当且仅当 Oa 和 Ob 既不满足 Oa→Ob，又不满足 Ob→Oa。</p>\n<p><strong>定义 3. 简单并发关系</strong></p>\n<p>当满足并发关系的两个操作 Oa 和 Ob 产生于相同的文档状态时，称 Oa 和 Ob 是简单并发关系。</p>\n<p><strong>定义 4. 偏并发关系</strong></p>\n<p>当满足并发关系的两个操作 Oa 和 Ob 产生于不同的文档状态时，称 Oa 和 Ob 是偏并发关系。</p>\n<h3 id=\"-具体例子协同文档编辑\" style=\"position:relative;\">✨ 具体例子：协同文档编辑<a href=\"#-%E5%85%B7%E4%BD%93%E4%BE%8B%E5%AD%90%E5%8D%8F%E5%90%8C%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91\" aria-label=\" 具体例子协同文档编辑 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<p>假设有两个用户Alice和Bob正在协同编辑一个文档，初始文档内容为：“Hello”</p>\n<p><strong>场景1：因果关系</strong></p>\n<ul>\n<li>Alice在位置5插入” World”，文档变为”Hello World”</li>\n<li>Bob看到Alice的操作后，在位置11插入”!”，文档变为”Hello World!”</li>\n<li>这里Bob的操作→Alice的操作，存在因果关系</li>\n</ul>\n<p><strong>场景2：并发关系</strong></p>\n<ul>\n<li>Alice在位置5插入” World”</li>\n<li>Bob同时在位置0插入”Hi ”</li>\n<li>两个操作并发产生，互不知晓对方的存在，存在并发关系</li>\n</ul>\n<h3 id=\"关系图示例\" style=\"position:relative;\">关系图示例<a href=\"#%E5%85%B3%E7%B3%BB%E5%9B%BE%E7%A4%BA%E4%BE%8B\" aria-label=\"关系图示例 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"mermaid\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-mermaid line-numbers\"><code class=\"language-mermaid\"><span class=\"token keyword\">graph</span> TD\n    <span class=\"token keyword\">subgraph</span> <span class=\"token string\">\"站点A (Alice)\"</span>\n        A1<span class=\"token text string\">[\"O1: Insert 'World' at pos 5&lt;br/>SV: (1,0)\"]</span>\n        A2<span class=\"token text string\">[\"O3: Insert '!' at pos 11&lt;br/>SV: (2,1)\"]</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">subgraph</span> <span class=\"token string\">\"站点B (Bob)\"</span>\n        B1<span class=\"token text string\">[\"O2: Insert 'Hi ' at pos 0&lt;br/>SV: (0,1)\"]</span>\n        B2<span class=\"token text string\">[\"O4: Insert '...' at pos 15&lt;br/>SV: (2,2)\"]</span>\n    <span class=\"token keyword\">end</span>\n\n    A1 <span class=\"token arrow operator\">--></span> A2\n    A1 <span class=\"token arrow operator\">--></span> B2\n    B1 <span class=\"token arrow operator\">--></span> B2\n\n    A1 <span class=\"token arrow operator\">-.-></span><span class=\"token label property\">|\"并发关系 ||\"|</span> B1\n    A2 <span class=\"token arrow operator\">-.-></span><span class=\"token label property\">|\"并发关系 ||\"|</span> B1\n\n    <span class=\"token keyword\">style</span> A1 <span class=\"token style\"><span class=\"token property\">fill</span><span class=\"token operator\">:</span>#e1f5fe</span>\n    <span class=\"token keyword\">style</span> A2 <span class=\"token style\"><span class=\"token property\">fill</span><span class=\"token operator\">:</span>#e1f5fe</span>\n    <span class=\"token keyword\">style</span> B1 <span class=\"token style\"><span class=\"token property\">fill</span><span class=\"token operator\">:</span>#fff3e0</span>\n    <span class=\"token keyword\">style</span> B2 <span class=\"token style\"><span class=\"token property\">fill</span><span class=\"token operator\">:</span>#fff3e0</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>图说明</strong>：</p>\n<ul>\n<li>实线箭头表示因果关系（happened-before）</li>\n<li>虚线表示并发关系（concurrent）</li>\n<li>SV表示状态向量（State Vector）</li>\n<li>O1→O3, O1→O4, O2→O4 为因果关系</li>\n<li>O1||O2, O2||O3 为并发关系</li>\n</ul>\n<p><img src=\"../../assets/Pasted%20image%2020250617233541.png\" alt=\"偏序关系示例1\">\n<strong>图 1</strong> 用时空图（time-space)给出操作之间的因果和并发关系。其中：</p>\n<ul>\n<li>O1 与 O2、O1 与 O3 为因果关系</li>\n<li>O2 与 O3、O1 与 O4、O2 与 O4、O3 与 O4 为并发关系</li>\n<li>O2 与 O3、O1 与 O4 为简单并发关系</li>\n<li>O2 与 O4、O3 与 O4 为偏并发关系</li>\n</ul>\n<p><img src=\"../../assets/Pasted%20image%2020250617233630.png\" alt=\"偏序关系示例2\"></p>\n<p><strong>图 2</strong> 采用因果执行图（Causally Executable Graph）给出操作之间的因果和并发关系。图中的顶点表示各站点产生的操作，操作之间的有向边表示操作的因果关系，其中，有向边的起点是有向边终点的因操作。操作之间的无向边表示操作的并发关系，包括简单并发关系和偏并发关系。如图 2 所示：O1→O2，O1→O3，O2||O3，O1||O4，O2||O4，O3||O4。</p>\n<h2 id=\"全序\" style=\"position:relative;\">全序<a href=\"#%E5%85%A8%E5%BA%8F\" aria-label=\"全序 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h2>\n<p>相比偏序关系定义的客观性，全序关系的定义更依赖于某种”假设”。例如，Lamport 提出的全序关系，如果逻辑时钟相等，假设可以通过进程 ID 号来确定次序，从而得到一种全序关系。类似地，实时协同编辑算法采用不同假设和策略来定义全序，基于某种”假设”来对操作或者操作对象进行定序。</p>\n<h3 id=\"操作的全序\" style=\"position:relative;\">操作的全序<a href=\"#%E6%93%8D%E4%BD%9C%E7%9A%84%E5%85%A8%E5%BA%8F\" aria-label=\"操作的全序 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<p>操作的全序是给实时协同编辑系统中产生的所有操作赋予唯一的全局次序，并按照全序进行操作转换或按照全序执行。操作的全序有两类具体方法。</p>\n<h4 id=\"分布式全序\" style=\"position:relative;\">分布式全序<a href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E5%BA%8F\" aria-label=\"分布式全序 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<p>代表性的方法有：</p>\n<ul>\n<li><strong>GOT 算法</strong>：基于 SV 和站点编号（siteID）定义了操作间的一种全序</li>\n<li><strong>TIBOT/TIBOT2.0</strong>：以线性的时间间隔 TI（Time Interval）和 siteID 来定义操作间的全序</li>\n</ul>\n<h5 id=\"-got-算法详解\" style=\"position:relative;\">📋 GOT 算法详解<a href=\"#-got-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3\" aria-label=\" got 算法详解 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h5>\n<p><strong>GOT（Generic Operational Transformation）算法</strong> 是一种基于分布式全序的经典操作转换算法，由 Sun 和 Chen 在 2002 年提出。</p>\n<h6>核心思想</h6>\n<p>GOT 算法通过状态向量（State Vector, SV）和站点编号（siteID）来定义操作间的全序关系，确保所有站点上的操作按照相同的顺序执行，从而保证最终一致性。</p>\n<h6>状态向量定义</h6>\n<p><strong>状态向量 SV</strong>：一个长度为 n 的整数数组，其中 n 是系统中站点的总数。</p>\n<ul>\n<li><code class=\"language-text\">SV[i]</code> 表示当前站点已知的站点 i 产生的操作数量</li>\n<li>每个操作都有一个关联的状态向量，表示该操作产生时的系统状态</li>\n</ul>\n<h6>全序定义规则</h6>\n<p>对于两个操作 <code class=\"language-text\">Op1</code> 和 <code class=\"language-text\">Op2</code>，其全序关系定义为：</p>\n<ol>\n<li><strong>状态向量和比较</strong>：计算 <code class=\"language-text\">sum(SV1)</code> 和 <code class=\"language-text\">sum(SV2)</code></li>\n<li><strong>优先级排序</strong>：\n<ul>\n<li>如果 <code class=\"language-text\">sum(SV1) &lt; sum(SV2)</code>，则 <code class=\"language-text\">Op1 &lt; Op2</code></li>\n<li>如果 <code class=\"language-text\">sum(SV1) > sum(SV2)</code>，则 <code class=\"language-text\">Op1 > Op2</code></li>\n<li>如果 <code class=\"language-text\">sum(SV1) = sum(SV2)</code>，则比较 <code class=\"language-text\">siteID1</code> 和 <code class=\"language-text\">siteID2</code>\n<ul>\n<li>如果 <code class=\"language-text\">siteID1 &lt; siteID2</code>，则 <code class=\"language-text\">Op1 &lt; Op2</code></li>\n<li>如果 <code class=\"language-text\">siteID1 > siteID2</code>，则 <code class=\"language-text\">Op1 > Op2</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h6>算法流程示例</h6>\n<div class=\"gatsby-highlight\" data-language=\"mermaid\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-mermaid line-numbers\"><code class=\"language-mermaid\"><span class=\"token keyword\">sequenceDiagram</span>\n    <span class=\"token keyword\">participant</span> A as 站点A <span class=\"token text string\">(siteID=1)</span>\n    <span class=\"token keyword\">participant</span> B as 站点B <span class=\"token text string\">(siteID=2)</span>\n    <span class=\"token keyword\">participant</span> C as 站点C <span class=\"token text string\">(siteID=3)</span>\n\n    <span class=\"token keyword\">Note over</span> A,C<span class=\"token operator\">:</span> 初始状态<span class=\"token operator\">:</span> SV=<span class=\"token text string\">(0,0,0)</span>\n\n    A<span class=\"token arrow operator\">->></span>A<span class=\"token operator\">:</span> Op1<span class=\"token operator\">:</span> Insert<span class=\"token text string\">(\"H\",0)</span>&lt;br/>SV=<span class=\"token text string\">(1,0,0)</span>, sum=1\n    A<span class=\"token arrow operator\">->></span>B<span class=\"token operator\">:</span> 发送 Op1\n    A<span class=\"token arrow operator\">->></span>C<span class=\"token operator\">:</span> 发送 Op1\n\n    B<span class=\"token arrow operator\">->></span>B<span class=\"token operator\">:</span> Op2<span class=\"token operator\">:</span> Insert<span class=\"token text string\">(\"i\",1)</span>&lt;br/>SV=<span class=\"token text string\">(1,1,0)</span>, sum=2\n    B<span class=\"token arrow operator\">->></span>A<span class=\"token operator\">:</span> 发送 Op2\n    B<span class=\"token arrow operator\">->></span>C<span class=\"token operator\">:</span> 发送 Op2\n\n    C<span class=\"token arrow operator\">->></span>C<span class=\"token operator\">:</span> Op3<span class=\"token operator\">:</span> Insert<span class=\"token text string\">(\"!\",0)</span>&lt;br/>SV=<span class=\"token text string\">(1,1,1)</span>, sum=3\n    <span class=\"token keyword\">Note over</span> A,C<span class=\"token operator\">:</span> 全序<span class=\"token operator\">:</span> Op1 &lt; Op2 &lt; Op3&lt;br/><span class=\"token text string\">(基于SV和的比较)</span>\n\n    <span class=\"token keyword\">Note over</span> A,C<span class=\"token operator\">:</span> 最终结果<span class=\"token operator\">:</span> <span class=\"token string\">\"H!i\"</span> <span class=\"token text string\">(所有站点一致)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h6>具体实现示例</h6>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GOTAlgorithm</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">siteId<span class=\"token punctuation\">,</span> totalSites</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>siteId <span class=\"token operator\">=</span> siteId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stateVector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>totalSites<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 产生本地操作</span>\n  <span class=\"token function\">generateOperation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> position</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stateVector<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>siteId<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> operation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">,</span>\n      content<span class=\"token punctuation\">,</span>\n      position<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">siteId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>siteId<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">stateVector</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stateVector<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 复制当前状态向量</span>\n      <span class=\"token literal-property property\">timestamp</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operations<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> operation<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 接收远程操作</span>\n  <span class=\"token function\">receiveOperation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">operation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operations<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 更新状态向量</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stateVector<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stateVector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stateVector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">.</span>stateVector<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// GOT全序比较函数</span>\n  <span class=\"token function\">compareOperations</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">op1<span class=\"token punctuation\">,</span> op2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sum1 <span class=\"token operator\">=</span> op1<span class=\"token punctuation\">.</span>stateVector<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> sum2 <span class=\"token operator\">=</span> op2<span class=\"token punctuation\">.</span>stateVector<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum1 <span class=\"token operator\">!==</span> sum2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> sum1 <span class=\"token operator\">-</span> sum2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 状态向量和小的操作优先</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 状态向量和相等时，比较siteID</span>\n    <span class=\"token keyword\">return</span> op1<span class=\"token punctuation\">.</span>siteId <span class=\"token operator\">-</span> op2<span class=\"token punctuation\">.</span>siteId<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 获取全序排列的操作序列</span>\n  <span class=\"token function\">getOrderedOperations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operations<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compareOperations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用示例</span>\n<span class=\"token keyword\">const</span> siteA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GOTAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> siteB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GOTAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> siteC <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GOTAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 站点A生成操作</span>\n<span class=\"token keyword\">const</span> opA <span class=\"token operator\">=</span> siteA<span class=\"token punctuation\">.</span><span class=\"token function\">generateOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insert'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'操作A:'</span><span class=\"token punctuation\">,</span> opA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出: { type: 'insert', content: 'H', position: 0, siteId: 0, stateVector: [1,0,0] }</span>\n\n<span class=\"token comment\">// 站点B生成操作</span>\n<span class=\"token keyword\">const</span> opB <span class=\"token operator\">=</span> siteB<span class=\"token punctuation\">.</span><span class=\"token function\">generateOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insert'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'操作B:'</span><span class=\"token punctuation\">,</span> opB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出: { type: 'insert', content: 'i', position: 1, siteId: 1, stateVector: [0,1,0] }</span>\n\n<span class=\"token comment\">// 全序比较</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A &lt; B:'</span><span class=\"token punctuation\">,</span> siteA<span class=\"token punctuation\">.</span><span class=\"token function\">compareOperations</span><span class=\"token punctuation\">(</span>opA<span class=\"token punctuation\">,</span> opB<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true (sum=1 &lt; sum=1, siteId=0 &lt; siteId=1)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5 id=\"-tibottibot20-算法详解\" style=\"position:relative;\">📋 TIBOT/TIBOT2.0 算法详解<a href=\"#-tibottibot20-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3\" aria-label=\" tibottibot20 算法详解 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h5>\n<p><strong>TIBOT（Time Interval Based Operational Transformation）算法</strong> 是另一种分布式全序算法，通过时间间隔来定义操作的全序关系。</p>\n<h6>核心思想</h6>\n<p>TIBOT 算法使用**时间间隔（Time Interval, TI）**作为主要的排序依据，结合站点编号来确定操作的全序关系。每个操作都被分配一个时间间隔，这个时间间隔反映了操作的相对重要性和执行顺序。</p>\n<h6>时间间隔定义</h6>\n<p><strong>时间间隔 TI</strong>：一个实数值，表示操作在时间轴上的相对位置</p>\n<ul>\n<li>TI 值越小，操作的优先级越高</li>\n<li>通过算法动态计算，确保全局唯一性</li>\n</ul>\n<h6>TIBOT2.0 改进</h6>\n<p>TIBOT2.0 在原有基础上进行了优化：</p>\n<ul>\n<li><strong>更精确的时间间隔分配</strong>：避免时间间隔冲突</li>\n<li><strong>更好的网络延迟处理</strong>：适应不同网络环境</li>\n<li><strong>优化的存储和传输</strong>：减少数据开销</li>\n</ul>\n<h6>全序定义规则</h6>\n<p>对于两个操作 <code class=\"language-text\">Op1</code> 和 <code class=\"language-text\">Op2</code>：</p>\n<ol>\n<li><strong>时间间隔比较</strong>：\n<ul>\n<li>如果 <code class=\"language-text\">TI1 &lt; TI2</code>，则 <code class=\"language-text\">Op1 &lt; Op2</code></li>\n<li>如果 <code class=\"language-text\">TI1 > TI2</code>，则 <code class=\"language-text\">Op1 > Op2</code></li>\n</ul>\n</li>\n<li><strong>站点ID优先级</strong>：\n<ul>\n<li>如果 <code class=\"language-text\">TI1 = TI2</code>，则比较 <code class=\"language-text\">siteID1</code> 和 <code class=\"language-text\">siteID2</code></li>\n<li><code class=\"language-text\">siteID</code> 小的操作优先</li>\n</ul>\n</li>\n</ol>\n<h6>时间间隔分配算法</h6>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TIBOTAlgorithm</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">siteId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>siteId <span class=\"token operator\">=</span> siteId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTI <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 计算时间间隔</span>\n  <span class=\"token function\">calculateTimeInterval</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">previousTI<span class=\"token punctuation\">,</span> nextTI</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextTI <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果没有后续操作，TI = previousTI + 1</span>\n      <span class=\"token keyword\">return</span> previousTI <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousTI <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 如果没有前驱操作，TI = nextTI / 2</span>\n      <span class=\"token keyword\">return</span> nextTI <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 在两个操作之间插入，TI = (previousTI + nextTI) / 2</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>previousTI <span class=\"token operator\">+</span> nextTI<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 生成操作</span>\n  <span class=\"token function\">generateOperation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> position</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 查找插入位置的前后操作</span>\n    <span class=\"token keyword\">const</span> orderedOps <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrderedOperations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> previousTI<span class=\"token punctuation\">,</span> nextTI<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> orderedOps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>orderedOps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">&lt;=</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        previousTI <span class=\"token operator\">=</span> orderedOps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>timeInterval<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        nextTI <span class=\"token operator\">=</span> orderedOps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>timeInterval<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> timeInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculateTimeInterval</span><span class=\"token punctuation\">(</span>previousTI<span class=\"token punctuation\">,</span> nextTI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> operation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">,</span>\n      content<span class=\"token punctuation\">,</span>\n      position<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">siteId</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>siteId<span class=\"token punctuation\">,</span>\n      timeInterval<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">timestamp</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operations<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> operation<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// TIBOT全序比较函数</span>\n  <span class=\"token function\">compareOperations</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">op1<span class=\"token punctuation\">,</span> op2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">.</span>timeInterval <span class=\"token operator\">!==</span> op2<span class=\"token punctuation\">.</span>timeInterval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> op1<span class=\"token punctuation\">.</span>timeInterval <span class=\"token operator\">-</span> op2<span class=\"token punctuation\">.</span>timeInterval<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 时间间隔相等时，比较siteID</span>\n    <span class=\"token keyword\">return</span> op1<span class=\"token punctuation\">.</span>siteId <span class=\"token operator\">-</span> op2<span class=\"token punctuation\">.</span>siteId<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 获取全序排列的操作序列</span>\n  <span class=\"token function\">getOrderedOperations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operations<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>compareOperations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 接收远程操作</span>\n  <span class=\"token function\">receiveOperation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">operation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>operations<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用示例</span>\n<span class=\"token keyword\">const</span> tibotA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TIBOTAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tibotB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TIBOTAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 站点A生成操作</span>\n<span class=\"token keyword\">const</span> opA <span class=\"token operator\">=</span> tibotA<span class=\"token punctuation\">.</span><span class=\"token function\">generateOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insert'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TIBOT操作A:'</span><span class=\"token punctuation\">,</span> opA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出: { type: 'insert', content: 'H', position: 0, siteId: 0, timeInterval: 1 }</span>\n\n<span class=\"token comment\">// 站点B生成操作</span>\n<span class=\"token keyword\">const</span> opB <span class=\"token operator\">=</span> tibotB<span class=\"token punctuation\">.</span><span class=\"token function\">generateOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'insert'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TIBOT操作B:'</span><span class=\"token punctuation\">,</span> opB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出: { type: 'insert', content: 'e', position: 1, siteId: 1, timeInterval: 1 }</span>\n\n<span class=\"token comment\">// 全序比较</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A &lt; B:'</span><span class=\"token punctuation\">,</span> tibotA<span class=\"token punctuation\">.</span><span class=\"token function\">compareOperations</span><span class=\"token punctuation\">(</span>opA<span class=\"token punctuation\">,</span> opB<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true (TI相等时，siteId=0 &lt; siteId=1)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h6>TIBOT算法执行流程</h6>\n<div class=\"gatsby-highlight\" data-language=\"mermaid\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-mermaid line-numbers\"><code class=\"language-mermaid\"><span class=\"token keyword\">graph</span> TD\n    A<span class=\"token text string\">[产生操作]</span> <span class=\"token arrow operator\">--></span> B<span class=\"token text string\">[计算时间间隔TI]</span>\n    B <span class=\"token arrow operator\">--></span> C<span class=\"token text string\">{是否有前驱操作?}</span>\n    C <span class=\"token arrow operator\">--></span><span class=\"token label property\">|有|</span> D[TI = <span class=\"token text string\">(prev_TI + next_TI)</span> / 2]\n    C <span class=\"token arrow operator\">--></span><span class=\"token label property\">|无|</span> E<span class=\"token text string\">{是否有后续操作?}</span>\n    E <span class=\"token arrow operator\">--></span><span class=\"token label property\">|有|</span> F<span class=\"token text string\">[TI = next_TI / 2]</span>\n    E <span class=\"token arrow operator\">--></span><span class=\"token label property\">|无|</span> G<span class=\"token text string\">[TI = current_TI + 1]</span>\n    D <span class=\"token arrow operator\">--></span> H<span class=\"token text string\">[分配TI给操作]</span>\n    F <span class=\"token arrow operator\">--></span> H\n    G <span class=\"token arrow operator\">--></span> H\n    H <span class=\"token arrow operator\">--></span> I<span class=\"token text string\">[广播操作到其他站点]</span>\n    I <span class=\"token arrow operator\">--></span> J<span class=\"token text string\">[接收站点按TI和siteID排序]</span>\n    J <span class=\"token arrow operator\">--></span> K<span class=\"token text string\">[按全序执行操作]</span>\n    K <span class=\"token arrow operator\">--></span> L<span class=\"token text string\">[保证最终一致性]</span>\n\n    <span class=\"token keyword\">style</span> A <span class=\"token style\"><span class=\"token property\">fill</span><span class=\"token operator\">:</span>#e1f5fe</span>\n    <span class=\"token keyword\">style</span> K <span class=\"token style\"><span class=\"token property\">fill</span><span class=\"token operator\">:</span>#c8e6c9</span>\n    <span class=\"token keyword\">style</span> L <span class=\"token style\"><span class=\"token property\">fill</span><span class=\"token operator\">:</span>#c8e6c9</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h5 id=\"算法对比总结\" style=\"position:relative;\">算法对比总结<a href=\"#%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94%E6%80%BB%E7%BB%93\" aria-label=\"算法对比总结 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h5>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>GOT算法</th>\n<th>TIBOT/TIBOT2.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>排序依据</strong></td>\n<td>状态向量和(SV sum) + siteID</td>\n<td>时间间隔(TI) + siteID</td>\n</tr>\n<tr>\n<td><strong>时间复杂度</strong></td>\n<td>O(n) 计算SV和</td>\n<td>O(1) TI比较</td>\n</tr>\n<tr>\n<td><strong>空间复杂度</strong></td>\n<td>O(n) 存储状态向量</td>\n<td>O(1) 存储TI值</td>\n</tr>\n<tr>\n<td><strong>网络开销</strong></td>\n<td>传输完整状态向量</td>\n<td>仅传输TI值</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>中小规模协作</td>\n<td>大规模分布式环境</td>\n</tr>\n<tr>\n<td><strong>冲突解决</strong></td>\n<td>基于全局状态</td>\n<td>基于时间序列</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"实际应用考虑\" style=\"position:relative;\">实际应用考虑<a href=\"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E8%80%83%E8%99%91\" aria-label=\"实际应用考虑 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h5>\n<ol>\n<li><strong>网络延迟</strong>：TIBOT在高延迟网络环境中表现更好</li>\n<li><strong>可扩展性</strong>：TIBOT2.0 支持更多并发用户</li>\n<li><strong>存储效率</strong>：时间间隔比状态向量占用空间更少</li>\n<li><strong>实现复杂度</strong>：GOT概念更直观，TIBOT需要精确的时间间隔管理</li>\n</ol>\n<h4 id=\"集中式全序\" style=\"position:relative;\">集中式全序<a href=\"#%E9%9B%86%E4%B8%AD%E5%BC%8F%E5%85%A8%E5%BA%8F\" aria-label=\"集中式全序 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<p>又可分为中心服务器取全序和中心序列产生器取全序：</p>\n<p><strong>中心服务器取全序</strong>：将各协同站点产生的操作发送到中心服务器，中心服务器采用先进先出（First in First out）策略将接收操作序列化之后转发给其它站点，如：</p>\n<ul>\n<li>Jupiter 系统</li>\n<li>Google Wave/Docs</li>\n<li>NICE</li>\n</ul>\n<p><strong>中心序列产生器取全序</strong>：将中心序列产生器产生的连续的正整数赋予给各站点产生的操作，如：</p>\n<ul>\n<li>SOCT3/4：通过一个中心 Sequencer 定义了操作间全序</li>\n</ul>\n<p>某些算法系统，例如 COT 既可采用分布式取全序，也可采用集中式取全序。</p>\n<h3 id=\"操作对象的全序\" style=\"position:relative;\">操作对象的全序<a href=\"#%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%A8%E5%BA%8F\" aria-label=\"操作对象的全序 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<p>操作对象的全序指协同编辑系统中，操作对象在系统内部数据结构的全局位置 ID 标识。</p>\n<p>协同编辑算法通过维护内部数据结构中操作对象的全序位置关系来维护共享对象的一致性。代表性算法有：</p>\n<ul>\n<li><strong>AST 算法</strong>：采用了地址空间转换技术维护每个站点字符节点间一致的顺序</li>\n<li><strong>ABT 家族算法</strong>：通过操作转换技术维护各站点操作对象间相同的全序位置关系</li>\n<li><strong>CRDT 家族算法</strong>：通过给操作对象分配全局有序的唯一 ID，并通过 ID 将操作对象全序的保存到内部数据结构中实现各站点内部数据结构中操作对象间全序的位置关系</li>\n</ul>\n<h3 id=\"全序假设与优先级\" style=\"position:relative;\">全序假设与优先级<a href=\"#%E5%85%A8%E5%BA%8F%E5%81%87%E8%AE%BE%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7\" aria-label=\"全序假设与优先级 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<p>全序的定义，在前面若干判定条件相等情况下，往往假设可以用到优先级（Priority）定序。上述操作全序中的分布式全序方法和操作对象的全序方法，主要采用 siteID 作为优先级来对全序定义进行完备化。</p>\n<p>具体应用实例：</p>\n<ul>\n<li><strong>GOT</strong>：当两个操作的 SV 的和相同时，siteID 小的操作全序在前</li>\n<li><strong>TIBOT/TIBOT2.0</strong>：当两个操作的 TI 相同时，siteID 小的操作全序在前</li>\n<li><strong>SDT、SDTO、LBT 及 ABT</strong>：当两个并发的插入操作在同一位置插入不同操作对象时，siteID 小的操作对象全序在前</li>\n<li><strong>AST</strong>：当两个插入字符的 SV 和相同时，siteID 小的插入字符位置在前</li>\n<li><strong>WOOT</strong>：siteID 小的操作对象全序在前</li>\n<li><strong>TreeDoc</strong>：当两个操作对象的逻辑时钟相同时，siteID 小的操作对象的 ID 全序小</li>\n<li><strong>RGA</strong>：当两个操作对象的 session 相同且 SV 的和相同时，siteID 小的操作对象的 ID 全序小</li>\n</ul>\n<p>这些方法，本质上与 Lamport 的假设可以把进程 ID 号作为优先级进行全序完备化方法相似。</p>\n<h2 id=\"一致性模型\" style=\"position:relative;\">一致性模型<a href=\"#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B\" aria-label=\"一致性模型 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h2>\n<p>支持操作意图一致性的协同编辑算法可参照一致性模型来设计和开发。</p>\n<h3 id=\"主要一致性模型\" style=\"position:relative;\">主要一致性模型<a href=\"#%E4%B8%BB%E8%A6%81%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B\" aria-label=\"主要一致性模型 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<h4 id=\"1-cc-模型\" style=\"position:relative;\">(1) CC 模型<a href=\"#1-cc-%E6%A8%A1%E5%9E%8B\" aria-label=\"1 cc 模型 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<p>1996年，Ressel 在文献 中明确阐述了协同编辑算法要满足两个一致性条件：</p>\n<ul>\n<li><strong>因果一致性</strong>（Causality Preservation）</li>\n<li><strong>结果一致性</strong>（Convergence）</li>\n</ul>\n<p>并提出了 CC 模型。</p>\n<h4 id=\"2-cci-模型\" style=\"position:relative;\">(2) CCI 模型<a href=\"#2-cci-%E6%A8%A1%E5%9E%8B\" aria-label=\"2 cci 模型 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<p>后续研究发现 CC 模型不足以完整约束一个操作转换系统的行为。因此，Sun 在 CC 模型的基础上进行了完善，指出一个协同编辑系统除了要满足因果一致性和结果一致性外，还需要做到操作意图一致性，并给出 OT 算法应遵循的 CCI 模型：</p>\n<ul>\n<li><strong>因果一致性</strong></li>\n<li><strong>结果一致性</strong></li>\n<li><strong>操作意图一致性</strong>（Intention Preservation）[3, 61]</li>\n</ul>\n<p>大多数算法参照 CCI 模型设计和开发的。</p>\n<h4 id=\"3-ca-模型\" style=\"position:relative;\">(3) CA 模型<a href=\"#3-ca-%E6%A8%A1%E5%9E%8B\" aria-label=\"3 ca 模型 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<p>CCI 模型中意图保持定义的模糊性（ambiguity），提出了可以被形式化证明的 CA 模型：</p>\n<ul>\n<li><strong>因果一致性</strong></li>\n<li><strong>Admissibility 属性</strong></li>\n</ul>\n<p>其中，Admissibility 属性蕴含了操作意图一致性和结果一致性两方面含义。参照 CA 模型设计的协同编辑算法可以被形式化证明其算法的正确性。</p>\n<h3 id=\"因果一致性和结果一致性\" style=\"position:relative;\">因果一致性和结果一致性<a href=\"#%E5%9B%A0%E6%9E%9C%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E7%BB%93%E6%9E%9C%E4%B8%80%E8%87%B4%E6%80%A7\" aria-label=\"因果一致性和结果一致性 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<p><strong>定义 5. 因果一致性</strong></p>\n<p>给定任意一对操作 Oa 和 Ob，如果 Oa→Ob，那么在所有站点 Oa 在 Ob 之前执行。</p>\n<p><strong>定义 6. 结果一致性</strong></p>\n<p>当一个协同会话在静默状态时，所有站点共享文档的副本是一致的。</p>\n<h4 id=\"实现方法\" style=\"position:relative;\">实现方法<a href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\" aria-label=\"实现方法 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<p><strong>因果一致性</strong>：一般可通过 SV 定义和实现。</p>\n<p><strong>结果一致性</strong>：一般可通过两种方法实现：</p>\n<ol>\n<li><strong>转换属性方法</strong>：设计算法的转换函数满足转换属性 TP1（Transformation Property 1）和 TP2（Transformation Property 2）</li>\n<li><strong>唯一全序方法</strong>：设计算法的控制过程避免 TP1/TP2 的约束，即可以构建唯一全序的操作转换路径</li>\n</ol>\n<p>已有研究成果表明，设计转换函数满足 TP1/TP2 非常困难，相继有学者找出：</p>\n<ul>\n<li>dOPT 不能满足 TP1 和 TP2 的”puzzle”</li>\n<li>adOPTed 不满足 TP2 的”puzzle”</li>\n<li>SOCT2 不满足 TP1 的”puzzle”</li>\n<li>GOTO 不满足 TP1 的”puzzle”</li>\n</ul>\n<p>相比之下，第二类方法更容易实现结果一致性。</p>\n<h4 id=\"puzzle-问题的解决方案\" style=\"position:relative;\">Puzzle 问题的解决方案<a href=\"#puzzle-%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" aria-label=\"puzzle 问题的解决方案 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<p>为了解决 TP1 和 TP2 的”puzzle”问题，很多学者做了大量的研究和探索：</p>\n<ul>\n<li><strong>Sun（2014）</strong>：从转换函数层面上总结了 OT 算法的”puzzle”问题，包括 do 操作的 TP1/TP2 的”puzzle”问题以及 undo 操作的 IP1、IP2/IP3 的”puzzle”问题</li>\n<li><strong>解决思路</strong>：\n<ol>\n<li>从转换函数的层面上解决，但需要结合具体的应用来设计相应的转换函数</li>\n<li>从算法的控制层面上考虑设计避免 TP1/TP2、IP1 和 IP2/IP3 约束的 OT 算法</li>\n</ol>\n</li>\n<li><strong>Randolph 等人（2015）</strong>：总结了已有算法存在的”puzzle”问题，并利用自动机合成了满足 TP1 和 TP2 的操作转换函数</li>\n</ul>\n<h3 id=\"操作意图一致性\" style=\"position:relative;\">操作意图一致性<a href=\"#%E6%93%8D%E4%BD%9C%E6%84%8F%E5%9B%BE%E4%B8%80%E8%87%B4%E6%80%A7\" aria-label=\"操作意图一致性 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h3>\n<h4 id=\"sun-的定义\" style=\"position:relative;\">Sun 的定义<a href=\"#sun-%E7%9A%84%E5%AE%9A%E4%B9%89\" aria-label=\"sun 的定义 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<p>Sun 最早通过操作的”执行效果（execution effect）“给出”操作意图（intention of an operation）“的一个笼统定义 [3, 61]，并未严格定义、度量和说明”执行效果”。Sun 等人认为操作意图的具体定义要依赖于具体应用中的”操作语义（operation’s semantics）“，并且不能通过串行化方法达到。</p>\n<p>Sun 等人从两个层面上考虑维护操作意图的一致性 [3, 61]：</p>\n<ol>\n<li><strong>算法控制过程</strong>：给出了维护操作意图一致性的一个通用框架，即可采用维护操作的因果一致性和操作的全序来构建操作转换路径</li>\n<li><strong>操作转换函数</strong>：指出通过设计操作转换函数来维护操作的意图需要依赖于具体应用中的操作语义</li>\n</ol>\n<p>基于以上讨论，Sun 的操作意图的维护，结合了 Sun 同时代多版本的含义，多种结果只要获得其中的任意一个一致性结果，即认为满足操作意图一致性。</p>\n<h4 id=\"不同技术的实现方法\" style=\"position:relative;\">不同技术的实现方法<a href=\"#%E4%B8%8D%E5%90%8C%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\" aria-label=\"不同技术的实现方法 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<p><strong>地址空间转换技术</strong>：意图保持可以通过转换文档的地址空间实现。当处理并发操作时，并不需要转换操作，而是将文档的地址空间回溯到操作产生时的状态，在该状态下执行操作可以获取正确的执行位置。这种方法可以保证当所有的操作在各站点执行结束后，各站点线性结构存储的操作字符的顺序是一致的，实现了结果一致性和操作意图一致性。</p>\n<p><strong>CRDT 方法</strong>：与 OT 技术和地址空间转换技术不同，CRDT 方法维护操作意图一致性需要给每个操作对象分配全局唯一的 ID，结合不同的调度算法将操作对象全序的映射到内部的数据结构中，确保内部数据结构中操作对象的全序位置关系，从而实现操作意图一致性，并收敛于一致性的结果。</p>\n<h4 id=\"研究路线图\" style=\"position:relative;\">研究路线图<a href=\"#%E7%A0%94%E7%A9%B6%E8%B7%AF%E7%BA%BF%E5%9B%BE\" aria-label=\"研究路线图 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h4>\n<ol>\n<li><strong>建立维护操作意图一致性的整体框架</strong>：即每一步的执行都要维护操作的意图</li>\n<li><strong>针对某种”应用”</strong>：基于某种”效果”，描述或者定义某种”操作意图”</li>\n<li><strong>基于（2）中操作意图的描述或者定义</strong>：设计相应的操作意图一致性的维护算法</li>\n</ol>\n<p>虽然各类算法对操作意图的理解不同，定义不同，维护方法不同，应用效果不同，但到目前为止，基本上都能够被上述路线图所覆盖。</p>\n<h2 id=\"-操作转换具体例子\" style=\"position:relative;\">✨ 操作转换具体例子<a href=\"#-%E6%93%8D%E4%BD%9C%E8%BD%AC%E6%8D%A2%E5%85%B7%E4%BD%93%E4%BE%8B%E5%AD%90\" aria-label=\" 操作转换具体例子 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h2>\n<p><strong>场景</strong>：两个用户同时编辑文档”ABC”</p>\n<div class=\"gatsby-highlight\" data-language=\"mermaid\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-mermaid line-numbers\"><code class=\"language-mermaid\"><span class=\"token keyword\">sequenceDiagram</span>\n    <span class=\"token keyword\">participant</span> A as Alice\n    <span class=\"token keyword\">participant</span> S as Server\n    <span class=\"token keyword\">participant</span> B as Bob\n\n    <span class=\"token keyword\">Note over</span> A,B<span class=\"token operator\">:</span> 初始文档<span class=\"token operator\">:</span> <span class=\"token string\">\"ABC\"</span>\n\n    A<span class=\"token arrow operator\">->></span>S<span class=\"token operator\">:</span> Insert<span class=\"token text string\">(\"X\", 1)</span> → <span class=\"token string\">\"AXBC\"</span>\n    B<span class=\"token arrow operator\">->></span>S<span class=\"token operator\">:</span> Delete<span class=\"token text string\">(2)</span> → <span class=\"token string\">\"AB\"</span>\n\n    <span class=\"token keyword\">Note over</span> S<span class=\"token operator\">:</span> 服务器需要进行操作转换\n\n    S<span class=\"token arrow operator\">->></span>B<span class=\"token operator\">:</span> Transform<span class=\"token punctuation\">(</span>Insert<span class=\"token text string\">(\"X\", 1)</span>, Delete<span class=\"token text string\">(2))</span>\n    S<span class=\"token arrow operator\">->></span>A<span class=\"token operator\">:</span> Transform<span class=\"token punctuation\">(</span>Delete<span class=\"token text string\">(2)</span>, Insert<span class=\"token text string\">(\"X\", 1))</span>\n\n    <span class=\"token keyword\">Note over</span> A<span class=\"token operator\">:</span> 执行转换后的Delete<span class=\"token text string\">(3)</span> → <span class=\"token string\">\"AXB\"</span>\n    <span class=\"token keyword\">Note over</span> B<span class=\"token operator\">:</span> 执行转换后的Insert<span class=\"token text string\">(\"X\", 1)</span> → <span class=\"token string\">\"AXB\"</span>\n\n    <span class=\"token keyword\">Note over</span> A,B<span class=\"token operator\">:</span> 最终一致性<span class=\"token operator\">:</span> <span class=\"token string\">\"AXB\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>转换规则示例</strong>：</p>\n<ul>\n<li><strong>IT 转换</strong>（Insert-Transform）：当插入操作遇到其他操作时的转换</li>\n<li><strong>DT 转换</strong>（Delete-Transform）：当删除操作遇到其他操作时的转换</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作组合</th>\n<th>转换前</th>\n<th>转换后</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Insert vs Insert</td>\n<td>Insert(“X”,1), Insert(“Y”,1)</td>\n<td>Insert(“X”,1), Insert(“Y”,2)</td>\n<td>后插入位置后移</td>\n</tr>\n<tr>\n<td>Insert vs Delete</td>\n<td>Insert(“X”,2), Delete(1)</td>\n<td>Insert(“X”,1), Delete(1)</td>\n<td>插入位置前移</td>\n</tr>\n<tr>\n<td>Delete vs Insert</td>\n<td>Delete(2), Insert(“X”,1)</td>\n<td>Delete(3), Insert(“X”,1)</td>\n<td>删除位置后移</td>\n</tr>\n<tr>\n<td>Delete vs Delete</td>\n<td>Delete(2), Delete(1)</td>\n<td>Delete(1), Delete(1)</td>\n<td>删除位置前移</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"总结\" style=\"position:relative;\">总结<a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"custom-class after\"><svg t=\"1685947446267\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4780\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"25\" height=\"25\"><path d=\"M282.453333 676.693333m-181.333333 0a181.333333 181.333333 0 1 0 362.666667 0 181.333333 181.333333 0 1 0-362.666667 0Z\" fill=\"#FFCA5F\" p-id=\"4781\"></path><path d=\"M570.453333 111.36m-42.666666 0a42.666667 42.666667 0 1 0 85.333333 0 42.666667 42.666667 0 1 0-85.333333 0Z\" fill=\"#FFCA5F\" p-id=\"4782\"></path><path d=\"M388.053333 866.346667A208 208 0 0 1 241.066667 512l106.666666-106.666667 45.226667 45.226667-106.666667 106.666667A144 144 0 1 0 490.666667 760.32l107.733333-106.666667 45.226667 45.226667-107.733334 106.666667a207.146667 207.146667 0 0 1-147.84 60.8zM723.413333 617.173333l-45.226666-45.226666 100.906666-100.906667A144 144 0 1 0 576 267.52l-100.906667 100.906667-45.226666-45.44 100.906666-100.906667A208 208 0 0 1 824.32 516.266667z\" fill=\"#5C1CF7\" p-id=\"4783\"></path><path d=\"M442.794667 558.506667l134.570666-134.549334 45.248 45.269334-134.549333 134.549333z\" fill=\"#5C1CF7\" p-id=\"4784\"></path></svg></a></h2>\n<p>基于上述对操作意图及一致性问题的讨论，可将代表性的操作意图一致性的维护算法大体分为三类：</p>\n<ol>\n<li><strong>操作转换算法</strong></li>\n<li><strong>地址空间转换算法</strong></li>\n<li><strong>可交换的复制式的数据类型</strong></li>\n</ol>","fields":{"slug":"/post/2017/实时协作算法相关概念/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%81%8F%E5%BA%8F%E5%9B%A0%E6%9E%9C%E5%85%B3%E7%B3%BB%E5%B9%B6%E5%8F%91%E5%85%B3%E7%B3%BB\">偏序、因果关系、并发关系</a></p>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89\">基本定义</a></li>\n<li><a href=\"#-%E5%85%B7%E4%BD%93%E4%BE%8B%E5%AD%90%E5%8D%8F%E5%90%8C%E6%96%87%E6%A1%A3%E7%BC%96%E8%BE%91\">✨ 具体例子：协同文档编辑</a></li>\n<li><a href=\"#%E5%85%B3%E7%B3%BB%E5%9B%BE%E7%A4%BA%E4%BE%8B\">关系图示例</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%85%A8%E5%BA%8F\">全序</a></p>\n<ul>\n<li>\n<p><a href=\"#%E6%93%8D%E4%BD%9C%E7%9A%84%E5%85%A8%E5%BA%8F\">操作的全序</a></p>\n<ul>\n<li>\n<p><a href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E5%BA%8F\">分布式全序</a></p>\n<ul>\n<li>\n<p><a href=\"#-got-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3\">📋 GOT 算法详解</a></p>\n<ul>\n<li><a href=\"#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3\">核心思想</a></li>\n<li><a href=\"#%E7%8A%B6%E6%80%81%E5%90%91%E9%87%8F%E5%AE%9A%E4%B9%89\">状态向量定义</a></li>\n<li><a href=\"#%E5%85%A8%E5%BA%8F%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99\">全序定义规则</a></li>\n<li><a href=\"#%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B\">算法流程示例</a></li>\n<li><a href=\"#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E7%A4%BA%E4%BE%8B\">具体实现示例</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-tibottibot20-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3\">📋 TIBOT/TIBOT2.0 算法详解</a></p>\n<ul>\n<li><a href=\"#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3-1\">核心思想</a></li>\n<li><a href=\"#%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%E5%AE%9A%E4%B9%89\">时间间隔定义</a></li>\n<li><a href=\"#tibot20-%E6%94%B9%E8%BF%9B\">TIBOT2.0 改进</a></li>\n<li><a href=\"#%E5%85%A8%E5%BA%8F%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99-1\">全序定义规则</a></li>\n<li><a href=\"#%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95\">时间间隔分配算法</a></li>\n<li><a href=\"#tibot%E7%AE%97%E6%B3%95%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B\">TIBOT算法执行流程</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94%E6%80%BB%E7%BB%93\">算法对比总结</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E8%80%83%E8%99%91\">实际应用考虑</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%9B%86%E4%B8%AD%E5%BC%8F%E5%85%A8%E5%BA%8F\">集中式全序</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%A8%E5%BA%8F\">操作对象的全序</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%85%A8%E5%BA%8F%E5%81%87%E8%AE%BE%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7\">全序假设与优先级</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B\">一致性模型</a></p>\n<ul>\n<li>\n<p><a href=\"#%E4%B8%BB%E8%A6%81%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B\">主要一致性模型</a></p>\n<ul>\n<li><a href=\"#1-cc-%E6%A8%A1%E5%9E%8B\">(1) CC 模型</a></li>\n<li><a href=\"#2-cci-%E6%A8%A1%E5%9E%8B\">(2) CCI 模型</a></li>\n<li><a href=\"#3-ca-%E6%A8%A1%E5%9E%8B\">(3) CA 模型</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%9B%A0%E6%9E%9C%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E7%BB%93%E6%9E%9C%E4%B8%80%E8%87%B4%E6%80%A7\">因果一致性和结果一致性</a></p>\n<ul>\n<li><a href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\">实现方法</a></li>\n<li><a href=\"#puzzle-%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">Puzzle 问题的解决方案</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%93%8D%E4%BD%9C%E6%84%8F%E5%9B%BE%E4%B8%80%E8%87%B4%E6%80%A7\">操作意图一致性</a></p>\n<ul>\n<li><a href=\"#sun-%E7%9A%84%E5%AE%9A%E4%B9%89\">Sun 的定义</a></li>\n<li><a href=\"#%E4%B8%8D%E5%90%8C%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\">不同技术的实现方法</a></li>\n<li><a href=\"#%E7%A0%94%E7%A9%B6%E8%B7%AF%E7%BA%BF%E5%9B%BE\">研究路线图</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%E6%93%8D%E4%BD%9C%E8%BD%AC%E6%8D%A2%E5%85%B7%E4%BD%93%E4%BE%8B%E5%AD%90\">✨ 操作转换具体例子</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></p>\n</li>\n</ul>","frontmatter":{"title":"实时协作算法基本类型","date":"July 01, 2017","description":null},"wordCount":{"words":914,"paragraphs":189,"sentences":190}}},"pageContext":{"slug":"/post/2017/实时协作算法相关概念/","previous":{"fields":{"slug":"/post/2017/实时协作算法基本类型/"},"frontmatter":{"title":"实时协作算法基本类型","tags":null,"description":null}},"next":{"fields":{"slug":"/post/2019/前端状态管理思考与实践/"},"frontmatter":{"title":"前端状态管理思考与实践","tags":["状态管理","前端"],"description":null}}}},"staticQueryHashes":["1006016363","324394502","63159454"],"slicesMap":{}}